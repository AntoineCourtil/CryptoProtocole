%% IF specification of protocole.hlpsl

section signature:

state_ts: agent * agent * agent * public_key * public_key * symmetric_key * symmetric_key * nat * text * text * public_key * public_key * symmetric_key * set(agent) * nat -> fact
state_bob: agent * agent * agent * public_key * public_key * symmetric_key * nat * text * text * public_key * public_key * symmetric_key * symmetric_key * set(agent) * nat -> fact
state_alice: agent * agent * agent * public_key * public_key * symmetric_key * nat * text * text * public_key * public_key * symmetric_key * symmetric_key * set(agent) * nat -> fact


section types:

h: hash_func
nb, a_b_CleSession, na: protocol_id
MGoal, start: message
ASGoal, Set_74, Set_52, Set_26, Dummy_Set_74, Dummy_Set_52, Dummy_Set_26: set(agent)
kats, kbts, cleSession, CleSession, KAts, KBts, Dummy_CleSession, dummy_sk: symmetric_key
pka, pkb, pki, PKaBIS, PKbBIS, PKa, PKb, dummy_pk: public_key
Na, Nb, ok, Dummy_Nb, Dummy_Na, dummy_nonce: text
set_121, set_117, set_106: set
State, 3, 2, 1, 5, 0, SID, 4, Dummy_State, SID2, SID1: nat
a, b, A, B, TS, ts, i, A2Goal, A1Goal: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(a).
 iknows(b).
 iknows(ts).
 iknows(pka).
 iknows(pkb).
 iknows(pki).
 iknows(inv(pki)).
 iknows(h).
 iknows(i).
 state_alice(a,b,ts,pka,pkb,kats,0,dummy_nonce,dummy_nonce,dummy_pk,dummy_pk,dummy_sk,dummy_sk,set_106,3).
 state_bob(b,a,ts,pka,pkb,kbts,0,dummy_nonce,dummy_nonce,dummy_pk,dummy_pk,dummy_sk,dummy_sk,set_117,4).
 state_ts(ts,a,b,pka,pkb,kats,kbts,0,dummy_nonce,dummy_nonce,dummy_pk,dummy_pk,dummy_sk,set_121,5)


section rules:

step step_0 (A,B,TS,PKa,PKb,KAts,Dummy_Na,Nb,PKaBIS,PKbBIS,CleSession,KBts,Dummy_Set_26,SID,Na) :=
 state_alice(A,B,TS,PKa,PKb,KAts,0,Dummy_Na,Nb,PKaBIS,PKbBIS,CleSession,KBts,Dummy_Set_26,SID).
 iknows(start)
=[exists Na]=>
 state_alice(A,B,TS,PKa,PKb,KAts,1,Na,Nb,PKaBIS,PKbBIS,CleSession,KBts,Dummy_Set_26,SID).
 secret(Na,na,Dummy_Set_26).
 iknows(pair(A,scrypt(KAts,pair(B,Na)))).
 contains(A,Dummy_Set_26).
 contains(B,Dummy_Set_26)

step step_1 (A,B,TS,PKa,PKb,KAts,Na,Dummy_Nb,PKaBIS,PKbBIS,Dummy_CleSession,KBts,Set_26,SID,Nb,CleSession) :=
 state_alice(A,B,TS,PKa,PKb,KAts,1,Na,Dummy_Nb,PKaBIS,PKbBIS,Dummy_CleSession,KBts,Set_26,SID).
 iknows(scrypt(KAts,pair(CleSession,scrypt(KBts,Nb))))
 =>
 state_alice(A,B,TS,PKa,PKb,KAts,2,Na,Nb,PKaBIS,PKbBIS,CleSession,KBts,Set_26,SID).
 request(A,B,a_b_CleSession,CleSession,SID).
 iknows(scrypt(CleSession,scrypt(KBts,Nb)))

step step_2 (A,B,TS,PKa,PKb,KAts,Na,Nb,PKaBIS,PKbBIS,CleSession,KBts,Set_26,SID) :=
 state_alice(A,B,TS,PKa,PKb,KAts,2,Na,Nb,PKaBIS,PKbBIS,CleSession,KBts,Set_26,SID).
 iknows(scrypt(CleSession,scrypt(KAts,Na)))
 =>
 state_alice(A,B,TS,PKa,PKb,KAts,3,Na,Nb,PKaBIS,PKbBIS,CleSession,KBts,Set_26,SID)

step step_3 (B,A,TS,PKa,PKb,KBts,Na,Dummy_Nb,PKaBIS,PKbBIS,CleSession,KAts,Dummy_Set_52,SID,Nb) :=
 state_bob(B,A,TS,PKa,PKb,KBts,0,Na,Dummy_Nb,PKaBIS,PKbBIS,CleSession,KAts,Dummy_Set_52,SID).
 iknows(scrypt(KBts,A))
=[exists Nb]=>
 state_bob(B,A,TS,PKa,PKb,KBts,1,Na,Nb,PKaBIS,PKbBIS,CleSession,KAts,Dummy_Set_52,SID).
 secret(Nb,nb,Dummy_Set_52).
 iknows(scrypt(KBts,Nb)).
 contains(A,Dummy_Set_52).
 contains(B,Dummy_Set_52)

step step_4 (B,A,TS,PKa,PKb,KBts,Dummy_Na,Nb,PKaBIS,PKbBIS,Dummy_CleSession,KAts,Set_52,SID,Na,CleSession) :=
 state_bob(B,A,TS,PKa,PKb,KBts,1,Dummy_Na,Nb,PKaBIS,PKbBIS,Dummy_CleSession,KAts,Set_52,SID).
 iknows(scrypt(KBts,pair(CleSession,scrypt(KAts,Na))))
 =>
 state_bob(B,A,TS,PKa,PKb,KBts,2,Na,Nb,PKaBIS,PKbBIS,CleSession,KAts,Set_52,SID).
 request(A,B,a_b_CleSession,CleSession,SID)

step step_5 (B,A,TS,PKa,PKb,KBts,Na,Nb,PKaBIS,PKbBIS,CleSession,KAts,Set_52,SID) :=
 state_bob(B,A,TS,PKa,PKb,KBts,2,Na,Nb,PKaBIS,PKbBIS,CleSession,KAts,Set_52,SID).
 iknows(scrypt(CleSession,scrypt(KBts,Nb)))
 =>
 state_bob(B,A,TS,PKa,PKb,KBts,3,Na,Nb,PKaBIS,PKbBIS,CleSession,KAts,Set_52,SID).
 iknows(scrypt(CleSession,scrypt(KAts,Na)))

step step_6 (TS,A,B,PKa,PKb,KAts,KBts,Dummy_Na,Nb,PKaBIS,PKbBIS,CleSession,Set_74,SID,Na) :=
 state_ts(TS,A,B,PKa,PKb,KAts,KBts,0,Dummy_Na,Nb,PKaBIS,PKbBIS,CleSession,Set_74,SID).
 iknows(pair(A,scrypt(KAts,pair(B,Na))))
 =>
 state_ts(TS,A,B,PKa,PKb,KAts,KBts,1,Na,Nb,PKaBIS,PKbBIS,CleSession,Set_74,SID).
 iknows(scrypt(KBts,A))

step step_7 (TS,A,B,PKa,PKb,KAts,KBts,Na,Dummy_Nb,PKaBIS,PKbBIS,Dummy_CleSession,Dummy_Set_74,SID,Nb,CleSession) :=
 state_ts(TS,A,B,PKa,PKb,KAts,KBts,1,Na,Dummy_Nb,PKaBIS,PKbBIS,Dummy_CleSession,Dummy_Set_74,SID).
 iknows(scrypt(KBts,Nb))
=[exists CleSession]=>
 state_ts(TS,A,B,PKa,PKb,KAts,KBts,2,Na,Nb,PKaBIS,PKbBIS,CleSession,Dummy_Set_74,SID).
 secret(CleSession,cleSession,Dummy_Set_74).
 witness(A,B,a_b_CleSession,CleSession).
 iknows(scrypt(KAts,pair(CleSession,scrypt(KBts,Nb)))).
 iknows(scrypt(KBts,pair(CleSession,scrypt(KAts,Na)))).
 contains(A,Dummy_Set_74).
 contains(B,Dummy_Set_74)


section properties:

property secrecy_of_na (MGoal,ASGoal) :=
 [] ((secret(MGoal,na,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_nb (MGoal,ASGoal) :=
 [] ((secret(MGoal,nb,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_cleSession (MGoal,ASGoal) :=
 [] ((secret(MGoal,cleSession,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_a_b_CleSession (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,a_b_CleSession,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,a_b_CleSession,MGoal))
     /\ ((request(A1Goal,A2Goal,a_b_CleSession,MGoal,SID1)
           /\ request(A1Goal,A2Goal,a_b_CleSession,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_na (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,na,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_nb (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,nb,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_cleSession (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,cleSession,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_a_b_CleSession (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,a_b_CleSession,MGoal,SID) &
 not(witness(A2Goal,A1Goal,a_b_CleSession,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_a_b_CleSession (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,a_b_CleSession,MGoal,SID1).
 request(A1Goal,A2Goal,a_b_CleSession,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

